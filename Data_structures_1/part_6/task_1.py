# Практика
# Часть 6. Дополнительно

# 1. Найдите и скопируйте алгоритм бинарного поиска. Запустите код и попробуйте разобраться как он работает
def binary_search(arr, target):
    # НЕ сортируем тут, потому что нарушим принцип бинарного поиска
    low = 0  # Устанавливаем начальный индекс (левая граница поиска)
    high = len(arr) - 1  # Устанавливаем конечный индекс (правая граница поиска)

    while low <= high:  # Пока границы не пересеклись (есть, что искать)
        mid = (low + high) // 2 # Находим середину списка
        guess = arr[mid]  # Получаем значение в середине списка

        if guess == target:
            return mid  # Если нашли нужное значение — возвращаем его индекс
        elif guess < target:
            low = mid + 1  # Искомое значение правее — смещаем левую границу
        else:
            high = mid - 1  # Искомое значение левее — смещаем правую границу

    return -1  # Если не нашли значение — возвращаем -1



if __name__ == "__main__":
    my_list = [1, 3, 5, 7, 9, 11, 13]
    print(binary_search(my_list, 7))  # Выведет: 3
    print(binary_search([1, 3, 5, 7, 9, 11, 13], 13))  # Выведет: -1 (так как 4 нет в списке)



# Бинарный поиск работает, потому что порядок элементов помогает исключать половину вариантов за один шаг.